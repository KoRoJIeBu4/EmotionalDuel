from aiogram import Router, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from modules.database.database import Database, LeaderboardRow
from config import DATABASE_URL

router = Router()
db = Database(DATABASE_URL)


def get_main_menu_keyboard():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    kb = InlineKeyboardBuilder()
    kb.button(text="üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Å–æ–ø–µ—Ä–Ω–∏–∫", callback_data="find_random")
    kb.button(text="üè† –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É", callback_data="create_room")
    kb.button(text="üî¢ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ –∫–æ–¥—É", callback_data="join_room")
    kb.button(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")
    kb.button(text="üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥", callback_data="leaderboard")
    kb.adjust(1)
    return kb.as_markup()


@router.callback_query(F.data == "leaderboard")
async def show_leaderboard(call: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤.
    """
    await call.answer()  # —Å–Ω–∏–º–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∫–Ω–æ–ø–∫–∏

    top: list[LeaderboardRow] = db.get_leaderboard_top(limit=10)
    if not top:
        await call.message.answer("üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—É—Å—Ç ‚Äî –µ—â—ë –Ω–µ –±—ã–ª–æ –∏–≥—Ä.")
    else:
        lines = ["üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ (—Ç–æ–ø 10):", ""]
        for i, row in enumerate(top, start=1):
            win_rate_pct = f"{row.winrate*100:.0f}%"
            lines.append(
                f"{i}. üë§ {row.user_id} ‚Äî –ü–æ–±–µ–¥: {row.wins}, –ò–≥—Ä: {row.games}, WinRate: {win_rate_pct}"
            )
        await call.message.answer("\n".join(lines))

    # –≤—ã–≤–æ–¥–∏–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–Ω–æ–≤–∞
    kb = get_main_menu_keyboard()
    await call.message.answer("–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)


@router.callback_query(F.data == "my_stats")
async def my_stats(call: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã).
    """
    await call.answer()  # —Å–Ω–∏–º–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∫–Ω–æ–ø–∫–∏

    user_id = call.from_user.id
    history = db.get_user_history(user_id=user_id, limit=10)
    if not history:
        await call.message.answer("üìä –£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –¥—É—ç–ª–µ–π.")
    else:
        lines = ["üìä –¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã:"]
        for d in history:
            if d.winner_user_id is None:
                result = "–ù–∏—á—å—è ü§ù"
            elif d.winner_user_id == user_id:
                result = "–ü–æ–±–µ–¥–∞ üèÜ"
            else:
                result = "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ ü§¶"
            lines.append(f"{d.created_at.date()} ‚Äî {result} ‚Äî {d.score_a:.3f}/{d.score_b:.3f}")
        await call.message.answer("\n".join(lines))

    # –≤—ã–≤–æ–¥–∏–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–Ω–æ–≤–∞
    kb = get_main_menu_keyboard()
    await call.message.answer("–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
