import os
import traceback
from aiogram import Router, types, F
from aiogram.types import CallbackQuery, Message, InputFile, InputMediaPhoto
from aiogram.fsm.context import FSMContext
import keyboards as kb
from config import UPLOADS_DIR, CLEANUP_UPLOADS_AFTER_EVALUATION, RANDOM_MATCH_TIMEOUT, DATABASE_URL
from game_state import game_manager
from modules.emotion_recognition_pipeline.duel_api import DuelML
from modules.emotion_recognition_pipeline.task_management import TaskManager
from modules.database.database import Database

from states import UserStates  # –Ω–∞—à–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è

router = Router()

ml = DuelML()
task_manager = TaskManager()
db = Database(DATABASE_URL)

os.makedirs(UPLOADS_DIR, exist_ok=True)

async def set_user_state(state_storage, user_id: int, new_state):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        await state_storage.set_state(key=user_id, state=new_state)
    except Exception as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def get_user_state(state_storage, user_id: int):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        return await state_storage.get_state(key=user_id)
    except Exception as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

# ---------------------------
# –•–ï–õ–ü–ï–†: –æ—Ç–ø—Ä–∞–≤–∫–∞ 2-—Ö —Ñ–æ—Ç–æ
# ---------------------------
async def send_duel_photos(bot, room):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É) —Å –¥–≤—É–º—è —Ñ–æ—Ç–æ:
    - –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Å–Ω–∞—á–∞–ª–∞ –µ–≥–æ —Ñ–æ—Ç–æ, –∑–∞—Ç–µ–º —Ñ–æ—Ç–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
    """
    host = room.host_id
    guest = room.guest_id
    if not host or not guest:
        return

    # –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ø–æ user_id
    host_path = os.path.join(UPLOADS_DIR, f"{host}.jpg")
    guest_path = os.path.join(UPLOADS_DIR, f"{guest}.jpg")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    if not (os.path.exists(host_path) and os.path.exists(guest_path)):
        # –ï—Å–ª–∏ –∫–∞–∫–∏—Ö-—Ç–æ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑—Ä–∞—â–∞–µ–º
        print(f"[WARN] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {host_path} / {guest_path}")
        return

    for user_self, user_opp, self_path, opp_path in (
        (host, guest, host_path, guest_path),
        (guest, host, guest_path, host_path),
    ):
        try:
            media = [
                InputMediaPhoto(
                    media=types.BufferedInputFile.from_file(self_path),
                    caption="üì∏ –≠—Ç–æ –≤–∞—à–µ —Å–µ–ª—Ñ–∏"
                ),
                InputMediaPhoto(
                    media=types.BufferedInputFile.from_file(opp_path),
                    caption="üßë‚Äçü§ù‚Äçüßë –≠—Ç–æ —Å–µ–ª—Ñ–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞"
                ),
            ]
            # send_media_group –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (–∞–ª—å–±–æ–º)
            await bot.send_media_group(chat_id=user_self, media=media)
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_self}: {e}")


# --- –ö–ù–û–ü–ö–ò --- #
@router.callback_query(F.data == "create_room")
async def on_create_room(call: CallbackQuery, state: FSMContext):
    await call.answer()  # —Å–Ω–∏–º–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥—Ä—É–≥–æ–º —Ä–µ–∂–∏–º–µ
    cur = await state.get_state()
    if cur not in (None, UserStates.Idle.state):
        await call.message.answer("‚ö†Ô∏è –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start.")
        return

    # –ø–æ–º–µ—Ç–∏—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—ë—Ç –∫–æ–º–Ω–∞—Ç—É (–∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
    await state.set_state(UserStates.CreatingRoom)

    code = game_manager.create_room(call.from_user.id)

    # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ InRoom (–æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏ —Ñ–æ—Ç–æ)
    await state.set_state(UserStates.InRoom)

    await call.message.answer(
        f"üè† –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!\n–ö–æ–¥: <code>{code}</code>\n"
        f"–û—Ç–ø—Ä–∞–≤—å —ç—Ç–æ—Ç –∫–æ–¥ –¥—Ä—É–≥—É, —á—Ç–æ–±—ã –æ–Ω –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è.",
        parse_mode="HTML"
    )


@router.callback_query(F.data == "join_room")
async def on_join_room_request(call: CallbackQuery, state: FSMContext):
    await call.answer()  # —Å–Ω–∏–º–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    cur = await state.get_state()
    if cur not in (None, UserStates.Idle.state):
        await call.message.answer("‚ö†Ô∏è –ù–µ–ª—å–∑—è –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –ø–æ –∫–æ–¥—É, –ø–æ–∫–∞ –≤—ã –≤ –¥—Ä—É–≥–æ–º —Ä–µ–∂–∏–º–µ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start.")
        return

    # –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –∫–æ–¥–∞
    await state.set_state(UserStates.JoiningRoom)
    await call.message.answer("üî¢ –í–≤–µ–¥–∏ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã (4 —Ü–∏—Ñ—Ä—ã).")


@router.callback_query(F.data == "find_random")
async def on_find_random(call: CallbackQuery, state: FSMContext):
    await call.answer()  # —Å–Ω–∏–º–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É

    user_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    cur = await state.get_state()
    if cur not in (None, UserStates.Idle.state):
        await call.message.answer("‚ö†Ô∏è –ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start.")
        return

    # —Å—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ (—á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –º–µ—à–∞–ª–∏)
    await state.set_state(UserStates.SearchingRandom)

    opponent = game_manager.find_or_enqueue_for_random(user_id, timeout_seconds=RANDOM_MATCH_TIMEOUT)
    if opponent is None:
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å ‚Äî –∂–¥—ë–º
        await call.message.answer("üîç –ü–æ–∏—Å–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞... –æ–∂–∏–¥–∞–π!")
    else:
        # –Ω–∞–π–¥–µ–Ω –æ–ø–ø–æ–Ω–µ–Ω—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –ø–∞—Ä—ã
        room = game_manager.create_room_for_pair(host_id=user_id, guest_id=opponent)

        # —Å—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏e InRoom –¥–ª—è –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:
        try:
            await set_user_state(state.storage, opponent, UserStates.InRoom)
            await set_user_state(state.storage, user_id, UserStates.InRoom)
        except Exception as e:
            # –≤–æ–∑–º–æ–∂–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ ‚Äî –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∏–∂–µ
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ {opponent}: {e}")

        # –¥–∞—ë–º –∑–∞–¥–∞–Ω–∏–µ
        category, task_text, hint = task_manager.get_random_task()
        room.task_text = task_text

        await call.message.answer(f"üéØ –°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n–ó–∞–¥–∞–Ω–∏–µ: <b>{task_text}</b>\n–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.", parse_mode="HTML")
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—â–µ–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫—É (–µ–≥–æ —á–∞—Ç_id == opponent)
        await call.bot.send_message(opponent, f"üéØ –°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n–ó–∞–¥–∞–Ω–∏–µ: <b>{task_text}</b>\n–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.", parse_mode="HTML")


# --- –í–≤–æ–¥ –∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ JoiningRoom) --- #
@router.message(F.text.regexp(r"^\d{4}$"))
async def on_code_text(message: Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –∫–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ JoiningRoom
    cur = await state.get_state()
    if cur != UserStates.JoiningRoom.state:
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –≤–≤—ë–ª 4 —Ü–∏—Ñ—Ä—ã –≤–Ω–µ —Ä–µ–∂–∏–º–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º/—Å–æ–æ–±—â–∞–µ–º
        await message.answer("‚ÑπÔ∏è –ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ –∫–æ–¥—É, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üî¢ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ –∫–æ–¥—É'.")
        return

    code = message.text.strip()
    room = game_manager.join_room_by_code(code, message.from_user.id)
    if not room:
        await message.answer("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.set_state(UserStates.Idle)
        return

    try:
        await set_user_state(state.storage, room.host_id, UserStates.InRoom)
    except Exception as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö–æ—Å—Ç–∞ {room.host_id}: {e}")

    category, task_text, hint = task_manager.get_random_task()
    room.task_text = task_text
    await message.answer(f"‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ {code}.\n–ó–∞–¥–∞–Ω–∏–µ: <b>{task_text}</b>\n–û—Ç–ø—Ä–∞–≤—å —Å–µ–ª—Ñ–∏.", parse_mode="HTML")
    await message.bot.send_message(room.host_id, f"üéÆ –ò–≥—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è!\n–ó–∞–¥–∞–Ω–∏–µ: <b>{task_text}</b>\n–û—Ç–ø—Ä–∞–≤—å —Å–µ–ª—Ñ–∏.", parse_mode="HTML")


# --- –§–æ—Ç–æ --- #
@router.message(F.photo)
async def on_photo_received(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
    """
    user_id = message.from_user.id
    bot = message.bot
    os.makedirs(UPLOADS_DIR, exist_ok=True)
    file_path = os.path.join(UPLOADS_DIR, f"{user_id}.jpg")

    # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    await bot.download_file(file.file_path, destination=file_path)
    print(f"[PHOTO] –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {user_id}, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {file_path}")

    await message.answer("üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –û–∂–∏–¥–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...")

    # –ù–∞–π–¥—ë–º –∫–æ–º–Ω–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    room = game_manager.find_room_by_user(user_id)
    if not room:
        await message.answer("‚ÑπÔ∏è –¢—ã –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ.")
        await state.set_state(UserStates.Idle)
        return

    # –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_state = await state.get_state()
    allowed_states = [UserStates.InRoom.state, UserStates.InDuel.state, UserStates.SearchingRandom.state]

    if current_state not in allowed_states:
        print(f"[WARN] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {current_state}")

    room.mark_photo(user_id)
    print(f"[ROOM] {user_id} –æ—Ç–º–µ—Ç–∏–ª —Ñ–æ—Ç–æ. Room state: {room.photo_received}")

    # –ï—Å–ª–∏ –æ–±–∞ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã –∏ –æ—Ü–µ–Ω–∫–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞
    if room.both_photos_received() and not room.evaluation_started:
        room.evaluation_started = True
        print(f"[DUEL] –û–±–∞ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –¥—É—ç–ª—å –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room.code}")

        # –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–∞: –ø–µ—Ä–µ–≤–æ–¥–∏–º –æ–±–æ–∏—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ InDuel
        await state.set_state(UserStates.InDuel)
        await set_user_state(state.storage, room.host_id, UserStates.InDuel)
        await set_user_state(state.storage, room.guest_id, UserStates.InDuel)

        # –û—Ç–ø—Ä–∞–≤–∏–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Å 2-–º—è —Ñ–æ—Ç–æ –∫–∞–∂–¥–æ–º—É
        await send_duel_photos(bot, room)

        # –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await run_duel_and_notify(room, bot, state)


# --- –ó–∞–ø—É—Å–∫ –¥—É—ç–ª–∏ --- #
async def run_duel_and_notify(room, bot, caller_state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç ML-–∞–Ω–∞–ª–∏–∑ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∏–≥—Ä–æ–∫–æ–≤.
    caller_state ‚Äî FSMContext –≤—ã–∑–≤–∞–≤—à–µ–≥–æ (–Ω—É–∂–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ storage & —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π).
    """
    host = room.host_id
    guest = room.guest_id
    task_text = room.task_text or "neutral"

    try:
        await notify_users(bot, room, "üîé –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π...")

        scores = ml.score_duel_by_user_ids(
            task_text=task_text,
            user_a_id=host,
            user_b_id=guest,
            uploads_dir=UPLOADS_DIR,
            cleanup_after=CLEANUP_UPLOADS_AFTER_EVALUATION,
        )

        print(f"[ML] Duel result: A={scores.score_a}, B={scores.score_b}, winner={scores.winner}")

        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        winner_user_id = None
        if scores.winner == "a":
            winner_user_id = host
        elif scores.winner == "b":
            winner_user_id = guest

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        saved = db.save_duel(
            user_a_id=host,
            user_b_id=guest,
            task_text=task_text,
            score_a=scores.score_a,
            score_b=scores.score_b,
        )
        print(f"[DB] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î: id={saved.id}")

        await room_notify_result(bot, room, host, guest, scores.score_a, scores.score_b, winner_user_id, task_text,
                                 main_menu_markup=kb.main_menu)

    except Exception as e:
        traceback.print_exc()
        await notify_users(bot, room, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
    finally:
        # –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥—É—ç–ª–∏ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ Idle (None)
        try:
            await set_user_state(caller_state.storage, host, UserStates.Idle)
            await set_user_state(caller_state.storage, guest, UserStates.Idle)
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –ø–æ—Å–ª–µ –¥—É—ç–ª–∏: {e}")

        # —É–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É
        game_manager.remove_room(room.code)
        print(f"[ROOM] –£–¥–∞–ª–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞ {room.code}")


# --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è --- #
async def notify_users(bot, room, text: str):
    for uid in (room.host_id, room.guest_id):
        if not uid:
            continue
        try:
            await bot.send_message(chat_id=uid, text=text)
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {uid}: {e}")


async def room_notify_result(bot, room, host, guest, score_a, score_b, winner_user_id, task_text, main_menu_markup=None):
    """
    –û—Ç–ø—Ä–∞–≤–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º.
    –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω main_menu_markup ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–∏–º –º–µ–Ω—é.
    """
    def format_text(is_winner, score_self, score_opp):
        if winner_user_id is None:
            return f"‚öñÔ∏è –ù–∏—á—å—è!\n\n–≠–º–æ—Ü–∏—è: {task_text}\n–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {(score_self + 1) * 50:.3f}%\n–°–æ–ø–µ—Ä–Ω–∏–∫: {(score_opp + 1) * 50:.3f}%"
        if is_winner:
            return f"üèÜ –¢—ã –ø–æ–±–µ–¥–∏–ª!\n\n–≠–º–æ—Ü–∏—è: {task_text}\n–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {(score_self + 1) * 50:.3f}%\n–°–æ–ø–µ—Ä–Ω–∏–∫: {(score_opp + 1) * 50:.3f}%"
        else:
            return f"üòû –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª.\n\n–≠–º–æ—Ü–∏—è: {task_text}\n–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {(score_self + 1) * 50:.3f}%\n–°–æ–ø–µ—Ä–Ω–∏–∫: {(score_opp + 1) * 50:.3f}%"

    try:
        await bot.send_message(host, format_text(winner_user_id == host, score_a, score_b))
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ö–æ—Å—Ç—É {host}: {e}")

    try:
        await bot.send_message(guest, format_text(winner_user_id == guest, score_b, score_a))
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Å—Ç—é {guest}: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ)
    if main_menu_markup is not None:
        try:
            await bot.send_message(host, "üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í—ã–±–∏—Ä–∞–π, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:", reply_markup=main_menu_markup)
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ö–æ—Å—Ç—É: {e}")
        try:
            await bot.send_message(guest, "üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í—ã–±–∏—Ä–∞–π, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:", reply_markup=main_menu_markup)
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–æ—Å—Ç—é: {e}")
