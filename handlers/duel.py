import os
import traceback
from aiogram import Router, types, F
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import UPLOADS_DIR, CLEANUP_UPLOADS_AFTER_EVALUATION, RANDOM_MATCH_TIMEOUT, DATABASE_URL
from game_state import game_manager
from modules.emotion_recognition_pipeline.duel_api import DuelML
from modules.emotion_recognition_pipeline.task_management import TaskManager
from modules.database.database import Database

router = Router()

ml = DuelML()
task_manager = TaskManager()
db = Database(DATABASE_URL)

os.makedirs(UPLOADS_DIR, exist_ok=True)

def get_main_menu_keyboard():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    kb = InlineKeyboardBuilder()
    kb.button(text="üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Å–æ–ø–µ—Ä–Ω–∏–∫", callback_data="find_random")
    kb.button(text="üè† –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É", callback_data="create_room")
    kb.button(text="üî¢ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ –∫–æ–¥—É", callback_data="join_room")
    kb.button(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")
    kb.button(text="üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥", callback_data="leaderboard")
    kb.adjust(1)
    return kb.as_markup()

# --- –ö–ù–û–ü–ö–ò --- #
@router.callback_query(F.data == "create_room")
async def on_create_room(call: CallbackQuery):
    await call.answer()  # —Å–Ω–∏–º–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É

    code = game_manager.create_room(call.from_user.id)
    await call.message.answer(
        f"üè† –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!\n–ö–æ–¥: <code>{code}</code>\n"
        f"–û—Ç–ø—Ä–∞–≤—å —ç—Ç–æ—Ç –∫–æ–¥ –¥—Ä—É–≥—É, —á—Ç–æ–±—ã –æ–Ω –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è.",
        parse_mode="HTML"
    )


@router.callback_query(F.data == "join_room")
async def on_join_room_request(call: CallbackQuery):
    await call.answer()  # —Å–Ω–∏–º–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É

    await call.message.answer("üî¢ –í–≤–µ–¥–∏ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã (4 —Ü–∏—Ñ—Ä—ã).")


@router.callback_query(F.data == "find_random")
async def on_find_random(call: CallbackQuery):
    await call.answer()  # —Å–Ω–∏–º–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É

    user_id = call.from_user.id
    opponent = game_manager.find_or_enqueue_for_random(user_id, timeout_seconds=RANDOM_MATCH_TIMEOUT)
    if opponent is None:
        await call.message.answer("üîç –ü–æ–∏—Å–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞... –æ–∂–∏–¥–∞–π!")
    else:
        room = game_manager.create_room_for_pair(host_id=user_id, guest_id=opponent)
        category, task_text, hint = task_manager.get_random_task()
        room.task_text = task_text
        await call.message.answer(f"üéØ –°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n–ó–∞–¥–∞–Ω–∏–µ: <b>{task_text}</b>\n–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.", parse_mode="HTML")
        await call.bot.send_message(opponent, f"üéØ –°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n–ó–∞–¥–∞–Ω–∏–µ: <b>{task_text}</b>\n–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.", parse_mode="HTML")


# --- –í–≤–æ–¥ –∫–æ–¥–∞ --- #
@router.message(F.text.regexp(r"^\d{4}$"))
async def on_code_text(message: Message):
    code = message.text.strip()
    room = game_manager.join_room_by_code(code, message.from_user.id)
    if not room:
        await message.answer("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    category, task_text, hint = task_manager.get_random_task()
    room.task_text = task_text
    await message.answer(f"‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ {code}.\n–ó–∞–¥–∞–Ω–∏–µ: <b>{task_text}</b>\n–û—Ç–ø—Ä–∞–≤—å —Å–µ–ª—Ñ–∏.", parse_mode="HTML")
    await message.bot.send_message(room.host_id, f"üéÆ –ò–≥—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è!\n–ó–∞–¥–∞–Ω–∏–µ: <b>{task_text}</b>\n–û—Ç–ø—Ä–∞–≤—å —Å–µ–ª—Ñ–∏.", parse_mode="HTML")


# --- –§–æ—Ç–æ --- #
@router.message(F.photo)
async def on_photo_received(message: Message):
    user_id = message.from_user.id
    bot = message.bot
    os.makedirs(UPLOADS_DIR, exist_ok=True)
    file_path = os.path.join(UPLOADS_DIR, f"{user_id}.jpg")

    # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    await bot.download_file(file.file_path, destination=file_path)
    print(f"[PHOTO] –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {user_id}, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {file_path}")

    await message.answer("üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –û–∂–∏–¥–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...")

    room = game_manager.find_room_by_user(user_id)
    if not room:
        await message.answer("‚ÑπÔ∏è –¢—ã –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ.")
        return

    room.mark_photo(user_id)
    print(f"[ROOM] {user_id} –æ—Ç–º–µ—Ç–∏–ª —Ñ–æ—Ç–æ. Room state: {room.photo_received}")

    if room.both_photos_received() and not room.evaluation_started:
        room.evaluation_started = True
        print(f"[DUEL] –û–±–∞ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –¥—É—ç–ª—å –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room.code}")
        await run_duel_and_notify(room, bot)


# --- –ó–∞–ø—É—Å–∫ –¥—É—ç–ª–∏ --- #
async def run_duel_and_notify(room, bot):
    host = room.host_id
    guest = room.guest_id
    task_text = room.task_text or "neutral"

    try:
        await notify_users(bot, room, "üîé –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π...")

        scores = ml.score_duel_by_user_ids(
            task_text=task_text,
            user_a_id=host,
            user_b_id=guest,
            uploads_dir=UPLOADS_DIR,
            cleanup_after=CLEANUP_UPLOADS_AFTER_EVALUATION,
        )

        print(f"[ML] Duel result: A={scores.score_a}, B={scores.score_b}, winner={scores.winner}")

        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        winner_user_id = None
        if scores.winner == "a":
            winner_user_id = host
        elif scores.winner == "b":
            winner_user_id = guest

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        db.save_duel(
            user_a_id=host,
            user_b_id=guest,
            task_text=task_text,
            score_a=scores.score_a,
            score_b=scores.score_b,
        )
        print(f"[DB] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î")

        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
        try:
            main_menu = get_main_menu_keyboard()  # –µ—Å–ª–∏ —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ
        except Exception as e:
            traceback.print_exc()
            main_menu = None

        await room_notify_result(bot, room, host, guest, scores.score_a, scores.score_b, winner_user_id, task_text,
                                 main_menu_markup=main_menu)

    except Exception as e:
        traceback.print_exc()
        await notify_users(bot, room, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
    finally:
        game_manager.remove_room(room.code)
        print(f"[ROOM] –£–¥–∞–ª–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞ {room.code}")


# --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è --- #
async def notify_users(bot, room, text: str):
    for uid in (room.host_id, room.guest_id):
        if not uid:
            continue
        try:
            await bot.send_message(chat_id=uid, text=text)
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {uid}: {e}")


async def room_notify_result(bot, room, host, guest, score_a, score_b, winner_user_id, task_text, main_menu_markup=None):
    """
    –û—Ç–ø—Ä–∞–≤–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º.
    –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω main_menu_markup ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–∏–º –º–µ–Ω—é.
    """
    def format_text(is_winner, score_self, score_opp):
        if winner_user_id is None:
            return f"‚öñÔ∏è –ù–∏—á—å—è!\n\n–≠–º–æ—Ü–∏—è: {task_text}\n–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score_self:.3f}\n–°–æ–ø–µ—Ä–Ω–∏–∫: {score_opp:.3f}"
        if is_winner:
            return f"üèÜ –¢—ã –ø–æ–±–µ–¥–∏–ª!\n\n–≠–º–æ—Ü–∏—è: {task_text}\n–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score_self:.3f}\n–°–æ–ø–µ—Ä–Ω–∏–∫: {score_opp:.3f}"
        else:
            return f"üòû –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª.\n\n–≠–º–æ—Ü–∏—è: {task_text}\n–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score_self:.3f}\n–°–æ–ø–µ—Ä–Ω–∏–∫: {score_opp:.3f}"

    try:
        await bot.send_message(host, format_text(winner_user_id == host, score_a, score_b))
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ö–æ—Å—Ç—É {host}: {e}")

    try:
        await bot.send_message(guest, format_text(winner_user_id == guest, score_b, score_a))
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Å—Ç—é {guest}: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ)
    if main_menu_markup is not None:
        try:
            await bot.send_message(host, "üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í—ã–±–∏—Ä–∞–π, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:", reply_markup=main_menu_markup)
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ö–æ—Å—Ç—É: {e}")
        try:
            await bot.send_message(guest, "üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í—ã–±–∏—Ä–∞–π, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:", reply_markup=main_menu_markup)
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–æ—Å—Ç—é: {e}")