import os
from aiogram import Router, types, F
from aiogram.filters.command import Command
from aiogram.types import CallbackQuery, Message, InputFile, InputMediaPhoto
from modules.database.database import Database, LeaderboardRow
from config import UPLOADS_DIR, CLEANUP_UPLOADS_AFTER_EVALUATION, RANDOM_MATCH_TIMEOUT, DATABASE_URL
from modules.emotion_recognition_pipeline.duel_api import DuelML
from modules.emotion_recognition_pipeline.task_management import TaskManager
import keyboards as kb

router = Router()

ml = DuelML()
task_manager = TaskManager()
db = Database(DATABASE_URL)

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """

    user = message.from_user
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    db.save_user(
        user_id=user.id,
        first_name=user.first_name,
        last_name=user.last_name,
        username=user.username,
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –¥—É—ç–ª—å
    was_cancelled, cancelled_duel = db.cancel_duel_on_start(user.id)

    if was_cancelled and cancelled_duel:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
        opponent_id = cancelled_duel.user_a_id if cancelled_duel.user_a_id != user.id else cancelled_duel.user_b_id

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç—É
            opponent_name = db.get_user_name(opponent_id)
            await message.bot.send_message(
                opponent_id,
                f"‚ö†Ô∏è –î—É—ç–ª—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤–∞—à–∏–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–º {user.first_name}.",
                reply_markup=await kb.main_menu()
            )

            # –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(
                f"üî¥ –í–∞—à–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –¥—É—ç–ª—å —Å {opponent_name} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –¥—É—ç–ª–µ–π —ç–º–æ—Ü–∏–π.\n\n"
                "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=await kb.main_menu()
            )

        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ {opponent_id}: {e}")
            await message.answer(
                f"üî¥ –í–∞—à–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –¥—É—ç–ª—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –¥—É—ç–ª–µ–π —ç–º–æ—Ü–∏–π.\n\n"
                "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=await kb.main_menu()
            )
    else:
        # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –¥—É—ç–ª–∏ –Ω–µ –±—ã–ª–æ
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –¥—É—ç–ª–µ–π —ç–º–æ—Ü–∏–π.\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await kb.main_menu()
        )


@router.callback_query(F.data == "exit_queue")
async def on_exit_queue(call: CallbackQuery):
    await call.answer()  # —Å–Ω–∏–º–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É

    user_id = call.from_user.id

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –¥—É—ç–ª—å (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ start)
    was_cancelled, cancelled_duel = db.cancel_duel_on_start(user_id)

    # –ó–∞—Ç–µ–º –≤—ã—Ö–æ–¥–∏–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    db.leave_queue(user_id)

    if was_cancelled and cancelled_duel:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
        opponent_id = cancelled_duel.user_a_id if cancelled_duel.user_a_id != user_id else cancelled_duel.user_b_id

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç—É
            opponent_name = db.get_user_name(opponent_id)
            await call.bot.send_message(
                opponent_id,
                f"‚ö†Ô∏è –í–∞—à –æ–ø–ø–æ–Ω–µ–Ω—Ç {call.from_user.first_name} –≤—ã—à–µ–ª –∏–∑ –¥—É—ç–ª–∏.\n\n"
                "–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=await kb.main_menu()
            )

            # –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await call.message.answer(
                f"üî¥ –í—ã –≤—ã—à–ª–∏ –∏–∑ –¥—É—ç–ª–∏ —Å {opponent_name}.\n\n"
                "–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=await kb.main_menu()
            )

        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç—É
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ {opponent_id}: {e}")
            await call.message.answer(
                "üî¥ –í—ã –≤—ã—à–ª–∏ –∏–∑ –¥—É—ç–ª–∏ (–Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞).\n\n"
                "–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=await kb.main_menu()
            )
    else:
        # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –¥—É—ç–ª–∏ –Ω–µ –±—ã–ª–æ, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        await call.message.answer(
            "–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await kb.main_menu()
        )

@router.callback_query(F.data == "leaderboard")
async def show_leaderboard(call: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤.
    """
    await call.answer()  # —Å–Ω–∏–º–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∫–Ω–æ–ø–∫–∏

    top: list[LeaderboardRow] = db.get_leaderboard_top(limit=10)
    if not top:
        await call.message.answer("üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—É—Å—Ç ‚Äî –µ—â—ë –Ω–µ –±—ã–ª–æ –∏–≥—Ä.")
    else:
        lines = ["üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ (—Ç–æ–ø 10):", ""]
        for i, row in enumerate(top, start=1):
            win_rate_pct = f"{row.winrate*100:.0f}%"
            lines.append(
                f"{i}. üë§ {row.user_name} ‚Äî –ü–æ–±–µ–¥: {row.wins}, –ò–≥—Ä: {row.games}, –í–∏–Ω—Ä–µ–π—Ç: {win_rate_pct}"
            )
        await call.message.answer("\n".join(lines))

    # –≤—ã–≤–æ–¥–∏–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–Ω–æ–≤–∞
    await call.message.answer("–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await kb.main_menu())


@router.callback_query(F.data == "my_stats")
async def my_stats(call: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await call.answer()  # —Å–Ω–∏–º–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∫–Ω–æ–ø–∫–∏

    user_id = call.from_user.id
    history = db.get_user_history(user_id=user_id, limit=10)
    if not history:
        await call.message.answer("üìä –£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –¥—É—ç–ª–µ–π.")
    else:
        lines = ["üìä –¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã:"]
        for d in history:
            if d.winner_user_id is None:
                result = "–ù–∏—á—å—è ü§ù"
            elif d.winner_user_id == user_id:
                result = "–ü–æ–±–µ–¥–∞ üèÜ"
            else:
                result = "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ ü§¶"
            lines.append(f"{d.created_at.date()} ‚Äî {result} ‚Äî {(d.score_a + 1) * 50:.3f}% / {(d.score_b + 1) * 50:.3f}%")
        await call.message.answer("\n".join(lines))

    # –≤—ã–≤–æ–¥–∏–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–Ω–æ–≤–∞
    await call.message.answer("–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await kb.main_menu())

# --- –ö–ù–û–ü–ö–ò --- #
@router.callback_query(F.data == "create_room")
async def on_create_room(call: CallbackQuery):
    await call.answer()  # —Å–Ω–∏–º–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state = db.is_user_in_queue(call.from_user.id)
    if state:
        await call.message.answer(
            "‚ö†Ô∏è –í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∏–≥—Ä—É. –ú–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=await kb.exit_queue())
        return

    code = db.create_room(call.from_user.id)

    await call.message.answer(
        f"üè† –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!\n–ö–æ–¥: <code>{code}</code>\n"
        f"–û—Ç–ø—Ä–∞–≤—å —ç—Ç–æ—Ç –∫–æ–¥ –¥—Ä—É–≥—É, —á—Ç–æ–±—ã –æ–Ω –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è.",
        parse_mode="HTML"
    )

@router.callback_query(F.data == "join_room")
async def on_join_room_request(call: CallbackQuery):
    await call.answer()  # —Å–Ω–∏–º–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state = db.is_user_in_queue(call.from_user.id)
    if state:
        await call.message.answer(
            "‚ö†Ô∏è –í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∏–≥—Ä—É. –ú–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=await kb.exit_queue())
        return

    await call.message.answer("üî¢ –í–≤–µ–¥–∏ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã (4 —Ü–∏—Ñ—Ä—ã)")


@router.callback_query(F.data == "find_random")
async def on_find_random(call: CallbackQuery):
    await call.answer()  # —Å–Ω–∏–º–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É

    user_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state = db.is_user_in_queue(call.from_user.id)
    if state:
        await call.message.answer(
            "‚ö†Ô∏è –í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∏–≥—Ä—É. –ú–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=await kb.exit_queue())
        return

    db.join_queue(call.from_user.id)

    opponent = db.find_opponent(user_id=user_id)
    if opponent is None:
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å ‚Äî –∂–¥—ë–º
        await call.message.answer("üîç –ü–æ–∏—Å–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞... –æ–∂–∏–¥–∞–π!", reply_markup=await kb.exit_queue())
    else:
        # –Ω–∞–π–¥–µ–Ω –æ–ø–ø–æ–Ω–µ–Ω—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –ø–∞—Ä—ã
        duel = db.create_duel_from_queue(user_id=user_id, opponent_user_id=opponent.user_id)
        print(f"—Å–ª—É—á–∞–π–Ω—ã–π –±–æ–π {call.from_user.id} c {opponent.user_id}")

        await call.message.answer(f"üéØ –°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n–ó–∞–¥–∞–Ω–∏–µ: <b>{duel.task_text}</b>\n–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.", parse_mode="HTML")
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—â–µ–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫—É (–µ–≥–æ —á–∞—Ç_id == opponent.user_id)
        await call.bot.send_message(opponent.user_id, f"üéØ –°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n–ó–∞–¥–∞–Ω–∏–µ: <b>{duel.task_text}</b>\n–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.", parse_mode="HTML")


@router.message(F.text.regexp(r"^\d{4}$"))
async def on_code_text(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state = db.is_user_in_queue(message.from_user.id)
    if state:
        await message.answer(
            "‚ö†Ô∏è –í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∏–≥—Ä—É. –ú–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=await kb.exit_queue())
        return
    else:
        db.join_queue(user_id=message.from_user.id, room_code=int(message.text))
        opponent = db.find_opponent(user_id=message.from_user.id)
        if opponent is None:
            await message.answer("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            db.leave_queue(message.from_user.id)
        else:
            # –Ω–∞–π–¥–µ–Ω –æ–ø–ø–æ–Ω–µ–Ω—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –ø–∞—Ä—ã
            duel = db.create_duel_from_queue(user_id=message.from_user.id, opponent_user_id=opponent.user_id)

            await message.answer(f"‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ {int(message.text)}.\n–ó–∞–¥–∞–Ω–∏–µ: <b>{duel.task_text}</b>\n–û—Ç–ø—Ä–∞–≤—å —Å–µ–ª—Ñ–∏.", parse_mode="HTML")
            await message.bot.send_message(opponent.user_id, f"üéÆ –ò–≥—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è!\n–ó–∞–¥–∞–Ω–∏–µ: <b>{duel.task_text}</b>\n–û—Ç–ø—Ä–∞–≤—å —Å–µ–ª—Ñ–∏.", parse_mode="HTML")

# --- –§–æ—Ç–æ --- #
@router.message(F.photo)
async def on_photo_received(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
    """
    duel = db.get_active_duel_for_user(message.from_user.id)
    if duel is None:
        await message.answer(f"‚ùå –í—ã –Ω–µ –≤ –¥—É—ç–ª–∏, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫")
        return

    user_id = message.from_user.id
    bot = message.bot
    os.makedirs(UPLOADS_DIR, exist_ok=True)
    file_path = os.path.join(UPLOADS_DIR, f"{user_id}.jpg")

    # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    await bot.download_file(file.file_path, destination=file_path)
    print(f"[PHOTO] –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {user_id}, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {file_path}")

    if db.mark_duel_photo_received(duel.id, user_id):
        print(f"[DUEL] –û–±–∞ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –¥—É—ç–ª—å –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ {duel.user_a_id} –∏ {duel.user_b_id}")
        # –û—Ç–ø—Ä–∞–≤–∏–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Å 2-–º—è —Ñ–æ—Ç–æ –∫–∞–∂–¥–æ–º—É
        await send_duel_photos(duel, bot)

        # –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await run_duel(duel, bot)
    else:
        await message.answer("üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –û–∂–∏–¥–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞.")
        return

async def send_duel_photos(duel, bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É) —Å –¥–≤—É–º—è —Ñ–æ—Ç–æ:
    - –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Å–Ω–∞—á–∞–ª–∞ –µ–≥–æ —Ñ–æ—Ç–æ, –∑–∞—Ç–µ–º —Ñ–æ—Ç–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
    """

    # –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ø–æ user_id
    a_path = os.path.join(UPLOADS_DIR, f"{duel.user_a_id}.jpg")
    b_path = os.path.join(UPLOADS_DIR, f"{duel.user_b_id}.jpg")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    if not (os.path.exists(a_path) and os.path.exists(b_path)):
        # –ï—Å–ª–∏ –∫–∞–∫–∏—Ö-—Ç–æ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑—Ä–∞—â–∞–µ–º
        print(f"[WARN] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {a_path} / {b_path}")
        return

    for user_id, self_path, opp_path in (
        (duel.user_a_id, a_path, b_path),
        (duel.user_b_id, b_path, a_path),
    ):
        try:
            media = [
                InputMediaPhoto(
                    media=types.BufferedInputFile.from_file(self_path),
                    caption="üì∏ –≠—Ç–æ –≤–∞—à–µ —Å–µ–ª—Ñ–∏"
                ),
                InputMediaPhoto(
                    media=types.BufferedInputFile.from_file(opp_path),
                    caption="üßë‚Äçü§ù‚Äçüßë –≠—Ç–æ —Å–µ–ª—Ñ–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞"
                ),
            ]
            # send_media_group –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (–∞–ª—å–±–æ–º)
            await bot.send_media_group(chat_id=user_id, media=media)
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# --- –ó–∞–ø—É—Å–∫ –¥—É—ç–ª–∏ --- #
async def run_duel(duel, bot):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç ML-–∞–Ω–∞–ª–∏–∑ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∏–≥—Ä–æ–∫–æ–≤.
    """
    user_a = duel.user_a_id
    user_b = duel.user_b_id
    task_text = duel.task_text

    try:
        for user_id in (user_a, user_b):
            if not user_id:
                continue
            try:
                await bot.send_message(chat_id=user_id, text="üîé –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π...")
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {user_id}: {e}")

        scores = ml.score_duel_by_user_ids(
            task_text=task_text,
            user_a_id=user_a,
            user_b_id=user_b,
            uploads_dir=UPLOADS_DIR,
            cleanup_after=CLEANUP_UPLOADS_AFTER_EVALUATION,
        )

        print(f"[ML] Duel result: A={scores.score_a}, B={scores.score_b}, winner={scores.winner}")

        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        winner_user_id = None
        if scores.winner == "a":
            winner_user_id = user_a
        elif scores.winner == "b":
            winner_user_id = user_b

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        updated = db.update_duel_result(
            duel_id=duel.id,
            task_text=task_text,
            score_a=scores.score_a,
            score_b=scores.score_b,
        )
        print(f"[DB] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î: id={updated.id}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        def format_text(is_winner, score_self, score_opp):
            if winner_user_id is None:
                return f"‚öñÔ∏è –ù–∏—á—å—è!\n\n–≠–º–æ—Ü–∏—è: {task_text}\n–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {(score_self + 1) * 50:.3f}%\n–°–æ–ø–µ—Ä–Ω–∏–∫: {(score_opp + 1) * 50:.3f}%"
            if is_winner:
                return f"üèÜ –¢—ã –ø–æ–±–µ–¥–∏–ª!\n\n–≠–º–æ—Ü–∏—è: {task_text}\n–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {(score_self + 1) * 50:.3f}%\n–°–æ–ø–µ—Ä–Ω–∏–∫: {(score_opp + 1) * 50:.3f}%"
            else:
                return f"üòû –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª.\n\n–≠–º–æ—Ü–∏—è: {task_text}\n–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {(score_self + 1) * 50:.3f}%\n–°–æ–ø–µ—Ä–Ω–∏–∫: {(score_opp + 1) * 50:.3f}%"

        try:
            await bot.send_message(user_a, format_text(winner_user_id == user_a, updated.score_a, updated.score_b))
            await bot.send_message(user_a, "üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í—ã–±–∏—Ä–∞–π, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:", reply_markup=await kb.main_menu())
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç {user_a}: {e}")

        try:
            await bot.send_message(user_b, format_text(winner_user_id == user_b, updated.score_b, updated.score_a))
            await bot.send_message(user_b, "üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í—ã–±–∏—Ä–∞–π, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:", reply_markup=await kb.main_menu())
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç {user_b}: {e}")

    except Exception as e:
        print(f"[ERROR] –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        for user_id in (user_a, user_b):
            if not user_id:
                continue
            try:
                await bot.send_message(chat_id=user_id, text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ")
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {user_id}: {e}")
